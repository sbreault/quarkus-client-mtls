CREATE CERTS
---------------------------------
--generate client key
keytool -genkeypair -storepass password -keyalg RSA -keysize 2048 -dname "CN=client" -alias client -keystore client/client.keystore

--generate client csr
keytool -certreq -storepass password -keyalg rsa -alias client -keystore client/client.keystore -file client/client.csr

--CA sign
openssl x509 -req -CA ca/ca.crt -CAkey ca/ca.key -in client/client.csr -out client/client.crt -days 365 -CAcreateserial

keytool -import -v -trustcacerts -alias root -file ca/ca.crt -keystore client/client.keystore
keytool -import -v -trustcacerts -alias client -file client/client.crt -keystore client/client.keystore

--verify chain
keytool -list -v -keystore client/client.keystore

--import into truststore
keytool -import -storepass password -file client/client.crt -alias client -keystore ca/truststore


CREATE OS SECRETS
---------------------------------
--create client secret
oc create secret generic quarkus-client-mtls --from-file=client


CREATE OS S2I BUILD
---------------------------------
--s2i build
oc new-build --name=client registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift~https://github.com/openlab-red/quarkus-mtls-quickstart --context-dir=/quarkus-client-mtls

--or native build
oc new-build --name=client quay.io/quarkus/ubi-quarkus-native-s2i:19.3.1-java11~https://github.com/openlab-red/quarkus-mtls-quickstart --context-dir=/quarkus-client-mtls

--limit build resources
oc patch bc/server -p '{"spec":{"resources":{"limits":{"cpu":"800m", "memory":"600Mi"}}}}'

DEPLOY OS OBJECTS
---------------------------------
(run yaml snippets from quarkus-client-mtls.yaml)